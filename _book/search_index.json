[["index.html", "Recording Android Audio with Raspberry Pi Motivation", " Recording Android Audio with Raspberry Pi kawaitel 2024-01-30 Motivation Raspberry PiからAndroidを繰り返し発信させ、音声を録音して音声品質を評価するための環境を構築する ADBコマンドで発信する call_by_adb.sh ADBコマンドが機種で対応していないものもあるため、機種は限定 発信音を検出して録音を開始 incoming_record.py library(av) sample_wav&lt;-&quot;sample_wav/2023-07-14_19-36-31.wav&quot; html_tag_audio(file = (sample_wav)) fft_data&lt;-read_audio_fft(sample_wav) plot(fft_data) Figure 0.1: audio sample "],["hardware.html", "Chapter 1 Hardware", " Chapter 1 Hardware Xiaomi Redmi Note 11 Raspberry Pi4 ModelB AUX Cable 0.5m USB Audio Adapter Case Battery "],["rasbian-os-32bit-setup.html", "Chapter 2 Rasbian OS (32bit) setup 2.1 NOOBS 2.2 基本設定 2.3 ファームウェアの確認 2.4 システムの更新 2.5 VNCの設定 2.6 USB Audio Adapterの動作確認 2.7 Python 2.8 SDカードのバックアップ作成", " Chapter 2 Rasbian OS (32bit) setup 64bitOSではAudio Adapterがうまく動作しないので、作成したincoming_record.pyを動作させるため、デバック完了するまで暫定処置として RasbianOSの32bit版を使用する。 RasbianOSの32bit版はRaspberry PI Imagerで対応していないのでNOOBSを使用してインストールする 2.1 NOOBS RasbianOSの保存場所 https://downloads.raspberrypi.com/NOOBS/images /NOOBS/images/NOOBS-2020-02-07を選択する、他のカーネルが必要な場合はzipファイルにあるrelease_notes.txtからカーネルバージョンを調べてNOOBSのバージョンを選ぶ zipファイルのみをダウンロードしてSDカードにコピー、電源を入れてHDMIを接続すればインストール選択画面が表示される。指示に従ってインストールを実行する 2.2 基本設定 HDMIにモニターを接続して、マウスとキーボードを設定後 SSHの設定 パスワード WiFiの設定 タイムゾーン sudo timedatectl set-timezone Asia/Tokyo ホスト側SSHキー再設定を必要に応じて行う ssh-keygen -R 192.168.3.4 #ipアドレスはifconfigで確認する 2.3 ファームウェアの確認 pi@raspberrypi:~ $ uname -a Linux raspberrypi 4.19.97-v7l+ #1294 SMP Thu Jan 30 13:21:14 GMT 2020 armv7l GNU/Linux 2.4 システムの更新 sudo apt -y update sudo apt -yV upgrade sudo apt -yV autoremove sudo apt autoclean 必要なライブラリを導入 sudo apt install -y android-tools-adb android-tools-fastboot sudo apt install -y audacity sudo apt install -y libportaudio2 libportaudiocpp0 portaudio19-dev 2.5 VNCの設定 ポートは5901を使用 sudo apt install -y tightvncserver tightvncserver 2.6 USB Audio Adapterの動作確認 Device情報を確認する aplay -l **** ハードウェアデバイス PLAYBACK のリスト **** カード 0: ALSA [bcm2835 ALSA], デバイス 0: bcm2835 ALSA [bcm2835 ALSA] サブデバイス: 7/7 サブデバイス #0: subdevice #0 サブデバイス #1: subdevice #1 サブデバイス #2: subdevice #2 サブデバイス #3: subdevice #3 サブデバイス #4: subdevice #4 サブデバイス #5: subdevice #5 サブデバイス #6: subdevice #6 カード 0: ALSA [bcm2835 ALSA], デバイス 1: bcm2835 IEC958/HDMI [bcm2835 IEC958/HDMI] サブデバイス: 1/1 サブデバイス #0: subdevice #0 カード 0: ALSA [bcm2835 ALSA], デバイス 2: bcm2835 IEC958/HDMI1 [bcm2835 IEC958/HDMI1] サブデバイス: 1/1 サブデバイス #0: subdevice #0 カード 1: Device [Plugable USB Audio Device], デバイス 0: USB Audio [USB Audio] サブデバイス: 1/1 サブデバイス #0: subdevice #0 カード番号とデバイス番号の確認 incoming_record.pyの構成情報に使用 カード番号：1 デバイス番号：０ pi@raspberrypi:~ $ arecord -l **** ハードウェアデバイス CAPTURE のリスト **** カード 1: Device [Plugable USB Audio Device], デバイス 0: USB Audio [USB Audio] サブデバイス: 1/1 サブデバイス #0: subdevice #0 録音 AndroidのイヤホンとUSB Audio Adapterのマイク（赤）を接続 arecord -D plughw:1,0 -f cd -c 1 -r 44100 test.wav Ctrl-Cで録音ストップ Androidの音量はLevel6 &lt;- 最小で良い 2.7 Python Pythonのバージョン確認 pi@raspberrypi:~ $ python3 -V Python 3.7.3 Pythonライブラリを導入 pip3 install pyaudio pip3 list | egrep &quot;numpy|Audio&quot; numpy 1.16.2 PyAudio 0.2.14 2.8 SDカードのバックアップ作成 作成したカスタムイメージのバックアップ作成はMacから行う、SDカードのマウント先が異なる場合があるかもしれない。以下はSDカードのマウント先は/dev/disk4にある想定 作業ディレクトリへ移動 cd /tmp イメージの吸い出し sudo dd if=/dev/rdisk4 of=raspberry-backup.img bs=1m SDカードの入れ替え diskutil unmountDisk /dev/disk4 イメージを新しいSDカードへコピー sudo dd if=./raspberry-backup.img of=/dev/rdisk4 bs=1m "],["発信音を検出して録音.html", "Chapter 3 発信音を検出して録音", " Chapter 3 発信音を検出して録音 発信音を検出して相手側音声をWAVファイルとしてタイムスタンプをつけて保存 録音時間はRECORD_TIMEで規定 ViberやSMSなど短い通知音を出さないように設定しておく USBオーディオアダプターの警告メッセージの抑制 incoming_record.py #!/usr/bin/python3 import pyaudio import numpy as np import os import sys import subprocess import wave import time from datetime import datetime CHUNK = 1024 RATE = 48000 # サンプリング周波数 # 録音時間を指定（秒単位） RECORD_TIME = 15 # 音声閾値の検出回数 audio_count = 0 #初期値 AUDIO_START_COUNT = 40 # 録音した音声を保存するファイル名を指定 OUTPUT_DIRECTORY = &quot;./output/&quot; if not os.path.exists(OUTPUT_DIRECTORY): os.makedirs(OUTPUT_DIRECTORY) # 録音用のコマンドを定義 RECORD_COMMAND = &quot;arecord -D plughw:1,0 -f cd -c 1 -r 44100 -d {} -t wav&quot;.format(RECORD_TIME) P = pyaudio.PyAudio() def record_audio(): global stream, audio_count input = stream.read(CHUNK, exception_on_overflow=False) # bufferからndarrayに変換 ndarray = np.frombuffer(input, dtype=&#39;int16&#39;) a = [np.asscalar(i) for i in ndarray] # print(a[0]) # 音声のレベルをチェックする level = max(abs(x) for x in a) if level &gt; 1000: # レベルの閾値 audio_count += 1 if audio_count == AUDIO_START_COUNT: print(&#39;Start recording&#39;) # 録音処理 stream.stop_stream() stream.close() current_time = datetime.now().strftime(&quot;%Y-%m-%d_%H-%M-%S&quot;) output_file = os.path.join(OUTPUT_DIRECTORY, &quot;{}.wav&quot;.format(current_time)) subprocess.call(&quot;{} {}&quot;.format(RECORD_COMMAND, output_file), shell=True) stream = P.open(format=pyaudio.paInt16, channels=2, rate=RATE, frames_per_buffer=CHUNK, input=True, output=False) print(&#39;Stop Streaming&#39;) audio_count = 0 return stream = P.open(format=pyaudio.paInt16, channels=2, rate=RATE, frames_per_buffer=CHUNK, input=True, output=False) while True: try: record_audio() except KeyboardInterrupt: break P.terminate() USBオーディオアダプターの警告メッセージ根本対策は色々記事はあるが、面倒くさいので試してない。標準エラーを捨てる暫定対処 ラズパイと切断後も動作させたければ、nohupやdisownで対応すれば良い incoming_record.py 2&gt; /dev/null "],["adbを使って発信する.html", "Chapter 4 ADBを使って発信する", " Chapter 4 ADBを使って発信する 画面ロックはDisableであることが前提 ADBを使うため、開発者向けオプションがONになっていること さらに機種によってはUSB Debugging （Security setting）をONにしておくこと スクリプトは座標を使っているので、端末が縦表示であることが前提です 以下のスクリプトはRedmi Note 11用であり、別機種に変更する場合 touchscreenの座標（発信ボタンの座標）を変更する必要があります 長い時間端末を操作していないと、OSで規定されるdeepsleepの状態となりADBコマンドが動作しません。IDLE _TIMEを変更する場合には考慮が必要です call_by_adb.sh #!/bin/bash # for Xiaomi Redmi Note 11 HOLD_TIME=10 IDLE_TIME=30 argv=(&quot;$@&quot;) if [ ${#argv[@]} == 0 ] then echo &quot; usage: $0 dial_number&quot; exit fi while true do adb shell input keyevent KEYCODE_WAKEUP sleep 0.30 adb shell input swipe 0 2100 0 1500 sleep 0.30 adb shell input keyevent KEYCODE_HOME sleep 1.30 adb shell input keyevent KEYCODE_HOME sleep 1.30 adb shell am start -a android.intent.action.DIAL -d tel:$1 2&gt;1 &gt; /dev/null sleep 2.00 adb shell input touchscreen tap 544 2090 sleep $HOLD_TIME adb shell input touchscreen tap 544 2090 sleep 0.50 adb shell input keyevent KEYCODE_HOME sleep $IDLE_TIME done "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
